import os
import re
import pickle
import streamlit as st
from langchain.prompts import PromptTemplate
from langchain_ollama import ChatOllama
from functools import reduce
import operator

# Configuration de la page Streamlit
st.set_page_config(page_title="üéì Analyse Scolaire", layout="centered")
st.title("üéì Chatbot Scolaire - Analyse des Performances")

# Chargement des donn√©es avec cache
@st.cache_data(ttl=5184000)
def load_data():
    with open("df_finale.pkl", "rb") as f:
        df = pickle.load(f)
    return df

df_finale = load_data()

# Initialisation du mod√®le
llm = ChatOllama(model="gemma:2b", temperature=0.7)

# Prompt template
prompt_template = PromptTemplate(
    input_variables=["question", "donnees"],
    template="""
Tu es un expert en analyse p√©dagogique,  con√ßue pour fournir des r√©ponses pr√©cises, structur√©es et bas√©es sur des donn√©es scolaires.

Voici des donn√©es sur les performances scolaires d'√©l√®ves d'une m√™me classe. Chaque bloc correspond √† un √©l√®ve.

Ta t√¢che est :
### question concernant un √©l√®ve :
**Pour un √©l√®ve sp√©cifique** (par identifiant_unique_eleve ou id_eleve) :
- Fournis ses notes (notes_matieres, moyenne_t1, moyenne_t2, moyenne_t3), son rang (rang_t1, rang_t2, rang_t3), et ses absences (type_presence, motif_absence).
- Analyse ses forces (mati√®res avec hautes notes) et faiblesses (mati√®res avec basses notes).
- Identifie les tendances (ex. mati√®res difficiles, √©l√®ves performants,√©l√®ve moyen, √©l√®ve faible).
- Analyse ses r√©sultats globaux et par mati√®re.
- Compare sa performance √† celle de sa classe.
- Rep√®re ses points forts et ses difficult√©s.
- Fournis des suggestion et des conseils personnalis√©s pour son am√©lioration 

### question concernant une classe:
- donner l'effectif total de la classe (effectif_classe_t1) et par sexe (classe_effectif_1.0:masculin, classe_effectif_2.0:feminin)
- donn√© la moyenne g√©n√©rale de la classe (moyenne_classe_t1, moyenne_classe_t2, moyenne_classe_t3).
- donn√©e le taux de reussite  de la classe (taux_reussite_classe_t1, taux_reussite_classe_t2, taux_reussite_classe_t3) et selon le sexe (taux_reussite_classe_1.0 : garcon,	taux_reussite_classe_2.0 : fille
)
- comparer les performances selon le sexe 
** identifie:
- Le meilleur et le plus faible √©l√®ve selon la moyenne g√©n√©rale par trimestre, aussi la moyenne de la classe en se basant sur cette colonne (moyenne_classe_t1, moyenne_classe_t2, moyenne_classe_t3)
- Utilise les statistiques pour les moyennes, maximums et effectifs pour une classe dans la colonne nom_salle_classe(CP1,CP2,CE1,CE2,CM1 et CM2) dans une √©cole donn√©es
- Identifie les tendances 
- Rep√©rer les mati√®res les mieux et moins bien r√©ussies
- Indiquer s'il existe des cas exceptionnels (tr√®s bons ou tr√®s faibles)
- Donne un aper√ßu des √©carts de performance.
- Propose des suggestions et des pistes p√©dagogiques concr√®tes pour renforcer les acquis ou combler les lacunes.

### question concernan une √©cole:
**Dresse un bilan *par classe* :
- Nombre de classe (nb_classes)
- effectif de l'√©cole (effectif_total_ecole)
- Moyenne g√©n√©rale de chaque classe (moyenne_classe_t1, moyenne_classe_t2, moyenne_classe_t3).
** Int√®gre aussi :
- Effectif global des enseignants et selon le sexe(1:masculin, 2:feminin)
- Effectifs global des √©l√®ves et selon le sexe(1:masculin, 2:feminin)
- Pr√©sence de cantine
- Pr√©sence de latrines/toilettes/WC
- Pr√©sence de fontaine/pompe/eau potable
- Pr√©sence d'√©lectricit√©
- Milieu: urbain ou rural
- Mat√©riels didactiques
- Performances des √©l√®ves de fa√ßon globale et par sexe(moyenne par trimestre, mati√®res r√©ussies et moins r√©ussies)
- Assiduit√© (absences, pr√©sences, abandons) global¬†et¬†par¬†sexe(1:masculin, 2:feminin)
-  Les cas de *violence ou de victimisation* s'ils sont signal√©s.
- Les caract√©ristiques sp√©cifiques de l'√©cole (environnement, effectif, encadrement, etc.).
- Sugg√®re des recommandations r√©alistes pour am√©liorer la qualit√© de l'enseignement dans l'√©tablissement.

###Si la question concerne une CEB ou une commune
**Pr√©sente une *analyse comparative entre √©coles* :
- Nombre d'√©coles
- Nombre d'enseignants et par sexe
- Nombre √©l√®ves et par sexe
- Ratio √©l√®ves/Enseignants
- Proportion d'√©coles sans cantine
- Proportion d'√©coles sans latrines
- Proportion d'√©coles sans √©lectricit√© 
- Nombre de PDI en prenant comme variable le statut_eleve(2:PDI)
- Nombre d'√©l√®ves avec handicap
- Performances des √©l√®ves de fa√ßon globale et par sexe(moyenne par trimestre, mati√®res r√©ussies et moins r√©ussies)
- Assiduit√© (absences, pr√©sences, abandons) global¬†et¬†par¬†sexe
- Performances globales (par classe et par √©cole).
- Classement ou hi√©rarchisation des √©coles si pertinent.
- Forces et faiblesses communes ou sp√©cifiques.
- Signalement des situations probl√©matiques (violences, in√©galit√©s, d√©s√©quilibres).
- Propose des recommandations *√† l'√©chelle territoriale* (CEB ou commune) pour renforcer l'apprentissage et r√©duire les disparit√©s.

###Objectif final 
**Fournir une *analyse claire, structur√©e et compr√©hensible*, avec :
- Des *constats bas√©s sur les donn√©es*.
- Des *conclusions p√©dagogiques* pertinentes.
- Des *recommandations pratiques* pour am√©liorer les performances √† tous les niveaux analys√©s.

**Ne jamais inventer de donn√©es**. Si les donn√©es sont manquantes, indique-le clairement.


Question : {question}

Donn√©es :
{donnees}

Fais une r√©ponse claire et structur√©e.
"""
)

# Fonction pour d√©tecter un filtre dans la question
def extraire_filtre(question, valeurs_connues):
    for val in valeurs_connues:
        if val and str(val).lower() in question.lower():
            return val
    return None

def get_response_from_dataframe(question, df):
    from functools import reduce
    import operator
    reponses = []

    question_lower = question.lower()

    # Recherche des filtres possibles
    id_eleve = extraire_filtre(question_lower, df['id_eleve'].astype(str).unique())
    identifiant_unique = extraire_filtre(question_lower, df['identifiant_unique_eleve'].astype(str).unique())
    id_classe = extraire_filtre(question_lower, df['id_classe'].astype(str).unique())
    code_classe = extraire_filtre(question_lower, df['code_classe'].astype(str).unique())
    nom_classe = extraire_filtre(question_lower, df['nom_classe'].astype(str).unique())
    nom_ecole = extraire_filtre(question_lower, df['nom_ecole'].astype(str).unique())
    code_ecole = extraire_filtre(question_lower, df['code_ecole'].astype(str).unique())
    ceb = extraire_filtre(question_lower, df['ceb_ecole'].astype(str).unique())
    commune = extraire_filtre(question_lower, df['commune_ecole'].astype(str).unique())
    id_ecole = extraire_filtre(question_lower, df['id_ecole'].astype(str).unique())

    # üîç √âl√®ve
    if id_eleve or identifiant_unique:
        ident = id_eleve or identifiant_unique
        ligne = df[(df['id_eleve'].astype(str) == ident) | (df['identifiant_unique_eleve'].astype(str) == ident)]
        if not ligne.empty:
            ligne = ligne.iloc[0]
            donnees_texte = "\n".join([f"{col} : {ligne[col]}" for col in df.columns if col in ligne])
            prompt = prompt_template.format(question=question, donnees=donnees_texte)
            resultat = llm.invoke(prompt)
            return resultat.content if hasattr(resultat, 'content') else resultat

    # üîç Classe / √©cole
    filtres = []
    if nom_ecole: filtres.append(df['nom_ecole'].str.lower() == nom_ecole.lower())
    if code_ecole: filtres.append(df['code_ecole'].astype(str) == str(code_ecole))
    if ceb: filtres.append(df['ceb_ecole'].astype(str) == str(ceb))
    if commune: filtres.append(df['commune_ecole'].astype(str) == str(commune))
    if code_classe: filtres.append(df['code_classe'].astype(str) == str(code_classe))
    if nom_classe: filtres.append(df['nom_classe'].str.lower() == nom_classe.lower())
    if id_classe: filtres.append(df['id_classe'].astype(str) == str(id_classe))
    if id_ecole: filtres.append(df['id_ecole'].astype(str) == str(id_ecole))

    if filtres:
        condition = reduce(operator.and_, filtres)
        df_filtre = df[condition]
        if df_filtre.empty:
            return "Aucune donn√©e trouv√©e avec les crit√®res sp√©cifi√©s."

        # Fixer automatiquement le nombre d‚Äô√©l√®ves dans la classe /On √©vite d‚Äôafficher tous les √©l√®ves si ce n‚Äôest pas explicitement demand√©.
        nb_eleves = df_filtre.shape[0]

        # üéØ Analyse par classe
        if "classe" in question_lower or "classes" in question_lower:
            classes = df_filtre['nom_classe'].unique()
            for classe in classes:
                df_classe = df_filtre[df_filtre['nom_classe'] == classe]
                resume = {col: df_classe[col].mean() for col in df_classe.columns if df_classe[col].dtype != 'object'}
                donnees_texte = f"Classe : {classe}\n" + "\n".join([f"{k} : {v:.2f}" for k, v in resume.items()])
                prompt = prompt_template.format(question=question, donnees=donnees_texte)
                resultat = llm.invoke(prompt)
                if hasattr(resultat, 'content'):
                    resultat = resultat.content
                reponses.append(f"Classe {classe} :\n{resultat}")
            return "\n\n---\n\n".join(reponses)

        # üéØ Analyse globale de l‚Äô√©cole
        elif "√©cole" in question_lower or "ecole" in question_lower or "√©tablissement" in question_lower:
            resume = {col: df_filtre[col].mean() for col in df_filtre.columns if df_filtre[col].dtype != 'object'}
            donnees_texte = f"Ecole : {df_filtre['nom_ecole'].iloc[0]}\n" + "\n".join([f"{k} : {v:.2f}" for k, v in resume.items()])
            prompt = prompt_template.format(question=question, donnees=donnees_texte)
            resultat = llm.invoke(prompt)
            return resultat.content if hasattr(resultat, 'content') else resultat

        # üéØ Si CEB ou commune
        elif "ceb" in question_lower or "commune" in question_lower:
            resume = df_filtre.groupby("nom_ecole").mean(numeric_only=True)
            donnees_texte = resume.round(2).to_string()
            prompt = prompt_template.format(question=question, donnees=donnees_texte)
            resultat = llm.invoke(prompt)
            return resultat.content if hasattr(resultat, 'content') else resultat

        # üîÑ Sinon (traitement classe sans mention explicite) : r√©sum√© sans nommer les √©l√®ves
        resume = {col: df_filtre[col].mean() for col in df_filtre.columns if df_filtre[col].dtype != 'object'}
        donnees_texte = "R√©sum√© global :\n" + "\n".join([f"{k} : {v:.2f}" for k, v in resume.items()])
        prompt = prompt_template.format(question=question, donnees=donnees_texte)
        resultat = llm.invoke(prompt)
        return resultat.content if hasattr(resultat, 'content') else resultat

    return "Aucun filtre d√©tect√© dans la question. Veuillez sp√©cifier un √©l√®ve, une classe ou une √©cole."

# Initialisation de l'historique
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

# Affichage de l'historique dans la barre lat√©rale (√† gauche)
with st.sidebar:
    st.header("üìú Historique")
    
    if st.session_state.chat_history:
        for msg in st.session_state.chat_history:
            role = "üë§" if msg["role"] == "user" else "ü§ñ"
            st.markdown(f"{role} {msg['content']}")
    else:
        st.info("Aucun √©change pour le moment.")
    
    if st.button("üßπ Effacer l'historique"):
        st.session_state.chat_history = []
        st.success("Historique effac√©.")

# Titre principal
#st.title("Chatbot Scolarit√©")

# Saisie utilisateur
user_input = st.chat_input("Pose ta question")

if user_input:
    # G√©n√©rer la r√©ponse (fonction personnalis√©e)
    response = get_response_from_dataframe(user_input, df_finale)

    # Sauvegarde dans l'historique
    st.session_state.chat_history.append({"role": "user", "content": user_input})
    st.session_state.chat_history.append({"role": "assistant", "content": response})

    # Affichage du message utilisateur
    with st.chat_message("user"):
        st.write(user_input)

    # Affichage de la r√©ponse
    with st.chat_message("assistant"):
        st.write(response)


for message in st.session_state.chat_history:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])
